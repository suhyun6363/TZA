[{"/Users/yeeunahn/TZA/src/index.js":"1","/Users/yeeunahn/TZA/src/App.js":"2","/Users/yeeunahn/TZA/src/personal_color/ColorMeasurement.js":"3","/Users/yeeunahn/TZA/src/personal_color/Result3.js":"4","/Users/yeeunahn/TZA/src/personal_color/Draping2.js":"5","/Users/yeeunahn/TZA/src/personal_color/CapturePage.js":"6","/Users/yeeunahn/TZA/src/personal_color/CaptureImage.js":"7","/Users/yeeunahn/TZA/src/personal_color/Loading.js":"8","/Users/yeeunahn/TZA/src/personal_color/Result.js":"9","/Users/yeeunahn/TZA/src/personal_color/Result2.js":"10","/Users/yeeunahn/TZA/src/personal_color/Draping.js":"11","/Users/yeeunahn/TZA/src/personal_color/PersonalColorsDiagnosis.js":"12","/Users/yeeunahn/TZA/src/personal_color/WebcamCapture.js":"13","/Users/yeeunahn/TZA/src/personal_color/PersonalColors.js":"14"},{"size":295,"mtime":1715938855467,"results":"15","hashOfConfig":"16"},{"size":1315,"mtime":1715938855467,"results":"17","hashOfConfig":"16"},{"size":1242,"mtime":1715955768604,"results":"18","hashOfConfig":"16"},{"size":2515,"mtime":1715938855469,"results":"19","hashOfConfig":"16"},{"size":2137,"mtime":1715938855468,"results":"20","hashOfConfig":"16"},{"size":453,"mtime":1715938855468,"results":"21","hashOfConfig":"16"},{"size":970,"mtime":1715938855467,"results":"22","hashOfConfig":"16"},{"size":275,"mtime":1715938855468,"results":"23","hashOfConfig":"16"},{"size":2833,"mtime":1715938855469,"results":"24","hashOfConfig":"16"},{"size":9026,"mtime":1716221676461,"results":"25","hashOfConfig":"16"},{"size":4712,"mtime":1715938855468,"results":"26","hashOfConfig":"16"},{"size":1456,"mtime":1715938855469,"results":"27","hashOfConfig":"16"},{"size":5129,"mtime":1715938855469,"results":"28","hashOfConfig":"16"},{"size":1081,"mtime":1715938855468,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"sp53ed",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/yeeunahn/TZA/src/index.js",[],[],"/Users/yeeunahn/TZA/src/App.js",["63"],"// App.js\n\nimport React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport CapturePage from \"./personal_color/CapturePage\";\nimport ColorMeasurement from \"./personal_color/ColorMeasurement\";\nimport CaptureImage from \"./personal_color/CaptureImage\";\nimport Loading from \"./personal_color/Loading\";\nimport Result from \"./personal_color/Result\";\nimport Result2 from \"./personal_color/Result2\";\nimport Result3 from \"./personal_color/Result3\";\nimport Draping from \"./personal_color/Draping\";\nimport Draping2 from \"./personal_color/Draping2\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Routes>\n          <Route path=\"/\" element={<ColorMeasurement />} />\n          <Route path=\"/capture\" element={<CapturePage />} />\n          <Route path=\"/loading\" element={<Loading />} />\n          <Route path=\"/image\" element={<CaptureImage />} />\n          <Route path=\"/result\" element={<Result />} />\n          <Route path=\"/result2\" element={<Result2 />} />\n          <Route path=\"/result3\" element={<Result3 />} />\n          <Route path=\"/draping\" element={<Draping />} />\n          <Route path=\"/draping2\" element={<Draping2 />} />\n        </Routes>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/yeeunahn/TZA/src/personal_color/ColorMeasurement.js",[],"/Users/yeeunahn/TZA/src/personal_color/Result3.js",[],"/Users/yeeunahn/TZA/src/personal_color/Draping2.js",["64"],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Draping2.css\";\n\nconst SecondImageComponent = () => {\n  const [imageSrcList, setImageSrcList] = useState([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const getImageData = async () => {\n      try {\n        const imageUrls = [];\n        for (let i = 1; i <= 5; i++) {\n          const imageUrl = `http://3.36.217.107/media/second_draping/second_${i}.png`;\n          imageUrls.push(imageUrl);\n        }\n\n        const responses = await Promise.all(imageUrls.map((url) => fetch(url)));\n\n        const imageData = await Promise.all(\n          responses.map(async (response) => {\n            if (!response.ok) {\n              throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            const blob = await response.blob();\n            const reader = new FileReader();\n            return new Promise((resolve, reject) => {\n              reader.onloadend = () => {\n                resolve(reader.result);\n              };\n              reader.onerror = reject;\n              reader.readAsDataURL(blob);\n            });\n          })\n        );\n\n        setImageSrcList(imageData);\n      } catch (error) {\n        console.error(\"이미지를 가져오는 중 오류가 발생했습니다:\", error);\n      }\n    };\n\n    getImageData();\n  }, []);\n\n  const handleMeasureButtonClick = () => {\n    navigate(\"/\");\n  };\n\n  return (\n    <div className=\"outer-container\">\n      <div className=\"inner-container\">\n        <div className=\"grid-container\">\n          {imageSrcList.map((src, index) => (\n            <div key={index} className=\"grid-item-container\">\n              <img\n                src={src}\n                alt={`draping ${index + 1}`}\n                className=\"grid-item\"\n              />\n              {index === 7 && <p>Second Color</p>}\n            </div>\n          ))}\n        </div>\n        {/* <button id=\"etc-button\" onClick={handleMeasureButtonClick}>\n          처음으로 돌아가기\n        </button> */}\n      </div>\n    </div>\n  );\n};\n\nexport default SecondImageComponent;\n","/Users/yeeunahn/TZA/src/personal_color/CapturePage.js",[],"/Users/yeeunahn/TZA/src/personal_color/CaptureImage.js",[],"/Users/yeeunahn/TZA/src/personal_color/Loading.js",[],"/Users/yeeunahn/TZA/src/personal_color/Result.js",["65"],"// Result.js\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Result.css\";\n\nconst ImageComponent = () => {\n  const [imageSrcList, setImageSrcList] = useState([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchAnalysisData = async () => {\n      try {\n        // analysis 데이터를 가져옴\n        const responseAnalysisData = await fetch(\"http://3.36.217.107/analysis/\");\n        if (!responseAnalysisData.ok) {\n          throw new Error(`HTTP error! Status: ${responseAnalysisData.status}`);\n        }\n\n        const data = await responseAnalysisData.json();\n        // 가장 최근 데이터를 선택\n        const latestData = data[data.length - 1];\n        const analysisId = latestData.id;\n\n        // Django 서버에 있는 이미지들의 URL 배열\n        const imageUrls = [\n          \"http://3.36.217.107/media/cluster_images/cluster_1.png\",\n          \"http://3.36.217.107/media/cluster_images/cluster_2.png\",\n          \"http://3.36.217.107/media/cluster_images/cluster_3.png\",\n          `http://3.36.217.107/media/face_analysis_${analysisId}.png`, // 최신 ID로 URL 설정\n        ];\n\n        // 각 이미지 가져오기\n        for (const url of imageUrls) {\n          try {\n            const response = await fetch(url);\n            const blob = await response.blob();\n            const reader = new FileReader();\n\n            reader.onloadend = () => {\n              // Base64로 변환된 이미지 데이터를 배열에 추가\n              setImageSrcList((prevList) => [...prevList, reader.result]);\n            };\n\n            reader.onerror = (error) => {\n              console.error(\"이미지를 읽는 중 오류가 발생했습니다:\", error);\n            };\n\n            reader.readAsDataURL(blob);\n          } catch (error) {\n            console.error(\"이미지를 가져오는 중 오류가 발생했습니다:\", error);\n          }\n        }\n      } catch (error) {\n        console.error(\"데이터를 가져오는 중 오류가 발생했습니다:\", error);\n      }\n    };\n\n    fetchAnalysisData();\n  }, []);\n\n  console.log(imageSrcList);\n\n  const handleMeasureButtonClick = () => {\n    // 측정하기\n    navigate(\"/result2\");\n  };\n\n  return (\n    <div className=\"outer-container\">\n      <div className=\"inner-container\">\n        <div className=\"grid-container-cluster\">\n          {imageSrcList.map((src, index) => (\n            <img\n              key={index}\n              src={src}\n              alt={`Cluster Image ${index + 1}`}\n              className=\"grid-item\"\n            />\n          ))}\n        </div>\n        <button id=\"etc-button\" onClick={handleMeasureButtonClick}>\n          퍼스널컬러 진단 받기\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageComponent;","/Users/yeeunahn/TZA/src/personal_color/Result2.js",[],"/Users/yeeunahn/TZA/src/personal_color/Draping.js",[],"/Users/yeeunahn/TZA/src/personal_color/PersonalColorsDiagnosis.js",[],"/Users/yeeunahn/TZA/src/personal_color/WebcamCapture.js",["66","67","68","69","70"],"//WebcamCapture.js\n//얼굴촬영하는 페이지\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Webcam from \"react-webcam\";\nimport \"./WebcamCapture.css\";\nimport axios from \"axios\";\n\nconst WebcamCapture = ({ onCapture }) => {\n  const navigate = useNavigate();\n  const webcamRef = useRef(null);\n  const [countdown, setCountdown] = useState(3);\n  const [capturedImage, setCapturedImage] = useState(null);\n  const [showCountdown, setShowCountdown] = useState(false); // 새로운 state 추가\n\n  useEffect(() => {\n    const webcamElement = webcamRef.current.video;\n    const overlayImage = document.getElementById(\"person-image\");\n  }, []);\n\n  const handleCaptureClick = async () => {\n    setCountdown(3); // 초기화\n    setShowCountdown(true); // countdown-indicator를 표시하기 위해 state 업데이트\n\n    // 1초마다 countdown 값을 감소시키는 타이머\n    const countdownTimer = setInterval(() => {\n      setCountdown((prevCountdown) => prevCountdown - 1);\n    }, 1000);\n\n    // 3초 뒤에 실행되는 타이머\n    setTimeout(async () => {\n      clearInterval(countdownTimer); // 카운트다운 타이머 중지\n      setShowCountdown(false); // countdown-indicator를 숨기기 위해 state 업데이트\n\n      // 촬영 후 /loading으로 이동\n      navigate(\"/loading\");\n\n      if (webcamRef.current) {\n        const imageSrc = webcamRef.current.getScreenshot();\n\n        // 이미지 데이터 URL을 Blob으로 변환\n        const response = await fetch(imageSrc);\n        const blobImage = await response.blob();\n\n        try {\n          // FormData에 이미지 추가\n          const formData = new FormData();\n          formData.append(\"image\", blobImage, \"captured_image.jpg\");\n\n          // 이미지를 서버로 전송\n          const uploadResponse = await axios.post(\n            \"http://3.36.217.107/api/upload/\",\n            formData,\n            {\n              headers: {\n                \"Content-Type\": \"multipart/form-data\",\n              },\n            }\n          );\n\n          console.log(\"이미지 업로드 성공:\", uploadResponse.data);\n\n          navigate(\"/image\", {\n            state: { capturedImage: imageSrc },\n          });\n        } catch (error) {\n          // 전송 실패한 경우 오류 처리\n          console.error(\"이미지 업로드 실패:\", error);\n        }\n      }\n    }, 3000); // 3초 후에 실행\n  };\n\n  return (\n    <div>\n      <div id=\"video-container\">\n        {/* mirrored 속성을 true로 설정하여 웹캠 피드를 좌우로 뒤집습니다. */}\n        <Webcam\n          audio={false}\n          ref={webcamRef}\n          screenshotFormat=\"image/jpeg\"\n          mirrored={true}\n        />\n\n        {/* 이미지를 겹치게 표시할 부분 */}\n        <div className=\"overlay-image-container\">\n          <img id=\"person-image\" src=\"/person.png\" alt=\"Person Image\" />\n        </div>\n      </div>\n      {/* 촬영 버튼 */}\n      <button className=\"webcam-capture-button\" onClick={handleCaptureClick}>촬영하기</button>\n\n      {/* 카운트다운 표시 */}\n      {showCountdown && (\n        <div className=\"countdown-indicator\">{countdown}초 후에 촬영됩니다</div>\n      )}\n    </div>\n  );\n};\n\nexport default WebcamCapture;\n\n\n// //파일 선택해서 이미지 업로드하는 용\n// import React, { useRef, useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const WebcamCapture = () => {\n//   const fileInputRef = useRef(null);\n//   const [capturedImage, setCapturedImage] = useState(null);\n//   const navigate = useNavigate();\n\n//   const handleImageUpload = async () => {\n//     const fileInput = fileInputRef.current;\n//     const file = fileInput.files[0];\n    \n\n//     if (file) {\n//       try {\n//         // FormData에 이미지 추가\n//         const formData = new FormData();\n//         formData.append(\"image\", file, file.name);\n\n//         navigate(\"/loading\", {\n//           state: { capturedImage: URL.createObjectURL(file) }, // Pass the image URL to the next route\n//         });\n\n//         // 이미지를 서버로 전송\n//         const uploadResponse = await axios.post(\n//           \"http://3.36.217.107/api/upload/\",\n//           formData,\n//           {\n//             headers: {\n//               \"Content-Type\": \"multipart/form-data\",\n//             },\n//           }\n//         );\n\n//         console.log(\"이미지 업로드 성공:\", uploadResponse.data);\n\n//         // 여기에서 적절한 처리를 추가하거나 다른 페이지로 이동할 수 있습니다.\n//       } catch (error) {\n//         // 전송 실패한 경우 오류 처리\n//         console.error(\"이미지 업로드 실패:\", error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {/* 파일 선택을 위한 input */}\n//       <input type=\"file\" accept=\"image/*\" ref={fileInputRef} />\n\n//       {/* 이미지 업로드 버튼 */}\n//       <button onClick={handleImageUpload}>이미지 업로드</button>\n//     </div>\n//   );\n// };\n\n\n// export default WebcamCapture;\n","/Users/yeeunahn/TZA/src/personal_color/PersonalColors.js",[],{"ruleId":"71","severity":1,"message":"72","line":4,"column":27,"nodeType":"73","messageId":"74","endLine":4,"endColumn":33},{"ruleId":"71","severity":1,"message":"75","line":46,"column":9,"nodeType":"73","messageId":"74","endLine":46,"endColumn":33},{"ruleId":"76","severity":1,"message":"77","line":73,"column":13,"nodeType":"78","endLine":78,"endColumn":15},{"ruleId":"71","severity":1,"message":"79","line":14,"column":10,"nodeType":"73","messageId":"74","endLine":14,"endColumn":23},{"ruleId":"71","severity":1,"message":"80","line":14,"column":25,"nodeType":"73","messageId":"74","endLine":14,"endColumn":41},{"ruleId":"71","severity":1,"message":"81","line":18,"column":11,"nodeType":"73","messageId":"74","endLine":18,"endColumn":24},{"ruleId":"71","severity":1,"message":"82","line":19,"column":11,"nodeType":"73","messageId":"74","endLine":19,"endColumn":23},{"ruleId":"76","severity":1,"message":"77","line":88,"column":11,"nodeType":"78","endLine":88,"endColumn":73},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'handleMeasureButtonClick' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'capturedImage' is assigned a value but never used.","'setCapturedImage' is assigned a value but never used.","'webcamElement' is assigned a value but never used.","'overlayImage' is assigned a value but never used."]